Задание 3: прокси с балансировкой нагрузки.

Что хочется получить.

Прокси-сервер на каждое входящее соединение открывает исходящее к определенному серверу, данные при этом без изменений прокидываются в обе стороны (клиент -> прокси -> сервер, и наоборот). 
Конфигурация задается файлом, который состоит из строк вида "<src_port>,<dst1>, <dst2>,...".  <src_port> — порт на котором слушает прокси. <dst*> — ip:port серверов, к которым нужно установить соединение. Имя конфигурационного файла передается в качестве аргумента командной строки.
Сервер для исходящего соединения выбирается случайно из списка серверов в конфигурационном файле. Таким образом, прокси будет осуществлять простую балансировку нагрузки.
Запись в сокет должна быть буферизована: и клиент, и сервер могут не успевать вычитывать данные.
Если от клиента пришел end-of-file (клиент сказал shutdown(SHUT_WR) на своем сокете), мы должны отправить на сервер все буферизованные данные и продолжать отправлять клиенту данные, который присылает сервер. Аналогично нужно обрабатывать end-of-file от сервера.  Проверить это можно, используя netcat в качестве клиента и сервера, отправив end-of-file при помощи CTRL-D. 
В случае, когда клиент или сервер закрывает другую половину соединения или в случае ошибки, нужно разрывать оба соединения.

Требования к коду.

Код должен использовать одну из event-библиотек: libevent / libev / libuv / boost::asio. Код не должен содержать функций длиннее 150 строк.
Данных, привязанных к каждому клиенту будет достаточно много и крайне желательно, чтобы данные, относящиеся к одному клиенту были выделены в отдельную структуру/класс.

Последовательность действий.

Задание можно (но не обязательно) выполнять в следующей последовательности:
Accept: чтение конфигурации и accept соединений на нужных портах.
Echo: данные от клиента и отправляются их ему обратно.
Connect: при каждом accept-е, устанавливается соединение с сервером.
Server->Client: данные от сервера отправляются клиенту.
Client->Server: данные от клиента отправляются на сервер.
EOF: корректная обработка EOF с доотправкой всех данных.

Полезная информация.

На linux event-библиотеки должны быть доступны в стандартных репозиториях (может понадобиться *-devel пакет).
На Mac OS X все 4 event-библиотеки можно установть с помощью homebrew: http://brew.sh/. Нужно установить homebrew и запустить "brew install boost" / "brew install libevent" / ...
boost::asio — header-only библиотека сама по себе, но зависит от boost::system и требует линковки с "-lboost_system".

Куда/как сдавать.

Сдавать нужно Makefile и все необходимые исходные файлы. В исходном файле нужно в комментариях написать используемую архитектуру (Mac OS X/Linux). Файлы нужно закоммитить в личный репозиторий в папку p3.